{"{\"assumptions\":{},\"sourceRoot\":\"/usr/local/google/home/nvitkov/.nvm/versions/node/v22.11.0/lib/node_modules/eslint-transforms/lib/v9-rule-migration/\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/usr/local/google/home/nvitkov/devtools/devtools-frontend\",\"filename\":\"/usr/local/google/home/nvitkov/.nvm/versions/node/v22.11.0/lib/node_modules/eslint-transforms/lib/v9-rule-migration/v9-rule-migration.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/usr/local/google/home/nvitkov/devtools/devtools-frontend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.26.0:development":{"value":{"code":"/**\n * @fileoverview Transform that migrates an ESLint API from v8 to v9\n * Refer to https://github.com/eslint/eslint-transforms/issues/25 for more information\n *\n * @author Nitin Kumar\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Formats a message string with ANSI escape codes to display it in yellow with bold styling in the terminal.\n * @param {string} message The message to be formatted.\n * @returns {string} The formatted message string.\n */\nfunction formatBoldYellow(message) {\n  return `\\u001b[1m\\u001b[33m${message}\\u001b[39m\\u001b[22m`;\n}\nconst contextMethodsToPropertyMapping = {\n  getSourceCode: \"sourceCode\",\n  getFilename: \"filename\",\n  getPhysicalFilename: \"physicalFilename\",\n  getCwd: \"cwd\"\n};\nconst contextToSourceCodeMapping = {\n  getScope: \"getScope\",\n  getAncestors: \"getAncestors\",\n  getDeclaredVariables: \"getDeclaredVariables\",\n  markVariableAsUsed: \"markVariableAsUsed\",\n  getSource: \"getText\",\n  getSourceLines: \"getLines\",\n  getAllComments: \"getAllComments\",\n  getNodeByRangeIndex: \"getNodeByRangeIndex\",\n  getComments: \"getComments\",\n  getCommentsBefore: \"getCommentsBefore\",\n  getCommentsAfter: \"getCommentsAfter\",\n  getCommentsInside: \"getCommentsInside\",\n  getJSDocComment: \"getJSDocComment\",\n  getFirstToken: \"getFirstToken\",\n  getFirstTokens: \"getFirstTokens\",\n  getLastToken: \"getLastToken\",\n  getLastTokens: \"getLastTokens\",\n  getTokenAfter: \"getTokenAfter\",\n  getTokenBefore: \"getTokenBefore\",\n  getTokenByRangeStart: \"getTokenByRangeStart\",\n  getTokens: \"getTokens\",\n  getTokensAfter: \"getTokensAfter\",\n  getTokensBefore: \"getTokensBefore\",\n  getTokensBetween: \"getTokensBetween\",\n  parserServices: \"parserServices\"\n};\nconst METHODS_WITH_SIGNATURE_CHANGE = new Set([\"getScope\", \"getAncestors\", \"markVariableAsUsed\", \"getDeclaredVariables\"]);\n\n/**\n * Returns the parent ObjectMethod node\n * @param {Node} nodePath The nodePath of the current node\n * @returns {Node} The parent ObjectMethod node\n */\nfunction getParentObjectMethod(nodePath) {\n  if (!nodePath) {\n    return null;\n  }\n  const node = nodePath.node;\n  if (node.type && node.type === \"Property\" && node.method) {\n    return node;\n  }\n  return getParentObjectMethod(nodePath.parentPath);\n}\n\n//------------------------------------------------------------------------------\n// Transform Definition\n//------------------------------------------------------------------------------\n\n/**\n * Transforms an ESLint rule from the old format to the new format.\n * @param {Object} fileInfo holds information about the currently processed file.\n * * @param {Object} api holds the jscodeshift API\n * @returns {string} the new source code, after being transformed.\n */\n\nmodule.exports = function (fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const USED_CONTEXT_METHODS = new Set();\n\n  /**\n   * Adds a variable declaration for the context method immediately inside the create() method\n   * @param {string} methodName The name of the context method\n   * @param {Array} args The arguments to be passed to the context method\n   * @returns {void}\n   */\n  function addContextMethodVariableDeclaration(methodName, args = []) {\n    if (USED_CONTEXT_METHODS.has(methodName)) {\n      return;\n    }\n    root.find(j.Property, {\n      key: {\n        name: \"create\"\n      }\n    }).replaceWith(({\n      node: createNode\n    }) => {\n      const contextMethodDeclaration = j.variableDeclaration(\"const\", [j.variableDeclarator(j.identifier(contextMethodsToPropertyMapping[methodName]), j.logicalExpression(\"??\", j.memberExpression(j.identifier(\"context\"), j.identifier(contextMethodsToPropertyMapping[methodName])), j.callExpression(j.memberExpression(j.identifier(\"context\"), j.identifier(methodName)), [...args])))]);\n\n      // Insert the sourceCodeDeclaration at the beginning of the create() method\n      createNode.value.body.body.unshift(contextMethodDeclaration);\n      USED_CONTEXT_METHODS.add(methodName);\n      return createNode;\n    });\n  }\n\n  // Update context methods\n  // context.getSourceCode() -> context.sourceCode ?? context.getSourceCode()\n  root.find(j.CallExpression, {\n    callee: {\n      object: {\n        type: \"Identifier\",\n        name: \"context\"\n      },\n      property: {\n        type: \"Identifier\",\n        name: name => Object.keys(contextMethodsToPropertyMapping).includes(name)\n      }\n    }\n  }).replaceWith(({\n    node\n  }) => {\n    const method = node.callee.property.name;\n    const args = node.arguments;\n    addContextMethodVariableDeclaration(method, args);\n\n    // If the method is already declared as a variable in the create() method\n    // Replace all instances of context methods with corresponding variable\n    if (USED_CONTEXT_METHODS.has(method)) {\n      return j.identifier(contextMethodsToPropertyMapping[method]);\n    }\n\n    // Otherwise, create a variable declaration for the method\n    return j.logicalExpression(\"??\", j.memberExpression(j.identifier(\"context\"), j.identifier(contextMethodsToPropertyMapping[method])), j.callExpression(j.memberExpression(j.identifier(\"context\"), j.identifier(method)), args));\n  });\n\n  // Remove the variable declarations which have value same as the declaration\n  // const sourceCode = sourceCode -> Remove\n  root.find(j.VariableDeclaration, {\n    declarations: [{\n      type: \"VariableDeclarator\",\n      id: {\n        type: \"Identifier\",\n        name: name => Object.values(contextMethodsToPropertyMapping).includes(name)\n      },\n      init: {\n        type: \"Identifier\"\n      }\n    }]\n  }).filter(({\n    node\n  }) => node.declarations[0].id.name === node.declarations[0].init.name).remove();\n\n  // Move context methods to SourceCode\n  // context.getSource() -> sourceCode.getText()\n  root.find(j.CallExpression, {\n    callee: {\n      type: \"MemberExpression\",\n      object: {\n        type: \"Identifier\",\n        name: \"context\"\n      },\n      property: {\n        type: \"Identifier\",\n        name: name => Object.keys(contextToSourceCodeMapping).includes(name)\n      }\n    }\n  }).replaceWith(nodePath => {\n    const node = nodePath.node;\n    const method = node.callee.property.name;\n    const args = node.arguments;\n    if (method === \"getComments\") {\n      // eslint-disable-next-line no-console -- This is an intentional warning message\n      console.warn(formatBoldYellow(`${path.relative(process.cwd(), fileInfo.path)}:${node.loc.start.line}:${node.loc.start.column} The \"getComments()\" method has been removed. Please use \"getCommentsBefore()\", \"getCommentsAfter()\", or \"getCommentsInside()\" instead. https://eslint.org/docs/latest/use/migrate-to-9.0.0#-removed-sourcecodegetcomments`));\n      return node;\n    }\n\n    // Add variable declaration for the method if not already added\n    addContextMethodVariableDeclaration(\"getSourceCode\");\n    if (METHODS_WITH_SIGNATURE_CHANGE.has(method)) {\n      const parentObjectMethodNode = getParentObjectMethod(nodePath);\n      const parentObjectMethodParamName = parentObjectMethodNode && parentObjectMethodNode.value.params[0].name;\n\n      // Return the node as is if the method is called with an argument\n      // context.getScope(node) -> sourceCode.getScope  ? sourceCode.getScope(node) : context.getScope();\n      return j.conditionalExpression(j.memberExpression(j.identifier(\"sourceCode\"), j.identifier(contextToSourceCodeMapping[method])), j.callExpression(j.memberExpression(j.identifier(\"sourceCode\"), j.identifier(contextToSourceCodeMapping[method])), parentObjectMethodParamName ? [...args, j.identifier(parentObjectMethodParamName)] : args), j.callExpression(j.memberExpression(j.identifier(\"context\"), j.identifier(method)), []));\n    }\n    node.callee.property.name = contextToSourceCodeMapping[method];\n    node.callee.object.name = \"sourceCode\";\n    return node;\n  });\n\n  // Migrate context.parserServices to sourceCode.parserServices\n  root.find(j.MemberExpression, {\n    object: {\n      type: \"Identifier\",\n      name: \"context\"\n    },\n    property: {\n      type: \"Identifier\",\n      name: \"parserServices\"\n    }\n  }).replaceWith(({\n    node\n  }) => {\n    node.object.name = \"sourceCode\";\n    return node;\n  });\n\n  // Warn for codePath.currentSegments\n  root.find(j.Property, {\n    key: {\n      type: \"Identifier\",\n      name: name => name === \"onCodePathStart\" || name === \"onCodePathEnd\"\n    }\n  }).find(j.MemberExpression, {\n    property: {\n      type: \"Identifier\",\n      name: \"currentSegments\"\n    }\n  }).forEach(({\n    node\n  }) => {\n    // eslint-disable-next-line no-console -- This is an intentional warning message\n    console.warn(formatBoldYellow(`${path.relative(process.cwd(), fileInfo.path)}:${node.loc.start.line}:${node.loc.start.column} The \"CodePath#currentSegments\" property has been removed and it can't be migrated automatically.\\nPlease read https://eslint.org/blog/2023/09/preparing-custom-rules-eslint-v9/#codepath%23currentsegments for more information.\\n`));\n  });\n  return root.toSource();\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["path","require","formatBoldYellow","message","contextMethodsToPropertyMapping","getSourceCode","getFilename","getPhysicalFilename","getCwd","contextToSourceCodeMapping","getScope","getAncestors","getDeclaredVariables","markVariableAsUsed","getSource","getSourceLines","getAllComments","getNodeByRangeIndex","getComments","getCommentsBefore","getCommentsAfter","getCommentsInside","getJSDocComment","getFirstToken","getFirstTokens","getLastToken","getLastTokens","getTokenAfter","getTokenBefore","getTokenByRangeStart","getTokens","getTokensAfter","getTokensBefore","getTokensBetween","parserServices","METHODS_WITH_SIGNATURE_CHANGE","Set","getParentObjectMethod","nodePath","node","type","method","parentPath","module","exports","fileInfo","api","j","jscodeshift","root","source","USED_CONTEXT_METHODS","addContextMethodVariableDeclaration","methodName","args","has","find","Property","key","name","replaceWith","createNode","contextMethodDeclaration","variableDeclaration","variableDeclarator","identifier","logicalExpression","memberExpression","callExpression","value","body","unshift","add","CallExpression","callee","object","property","Object","keys","includes","arguments","VariableDeclaration","declarations","id","values","init","filter","remove","console","warn","relative","process","cwd","loc","start","line","column","parentObjectMethodNode","parentObjectMethodParamName","params","conditionalExpression","MemberExpression","forEach","toSource"],"sourceRoot":"/usr/local/google/home/nvitkov/.nvm/versions/node/v22.11.0/lib/node_modules/eslint-transforms/lib/v9-rule-migration/","sources":["v9-rule-migration.js"],"sourcesContent":["/**\n * @fileoverview Transform that migrates an ESLint API from v8 to v9\n * Refer to https://github.com/eslint/eslint-transforms/issues/25 for more information\n *\n * @author Nitin Kumar\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Formats a message string with ANSI escape codes to display it in yellow with bold styling in the terminal.\n * @param {string} message The message to be formatted.\n * @returns {string} The formatted message string.\n */\nfunction formatBoldYellow(message) {\n    return `\\u001b[1m\\u001b[33m${message}\\u001b[39m\\u001b[22m`;\n}\n\nconst contextMethodsToPropertyMapping = {\n    getSourceCode: \"sourceCode\",\n    getFilename: \"filename\",\n    getPhysicalFilename: \"physicalFilename\",\n    getCwd: \"cwd\"\n};\n\nconst contextToSourceCodeMapping = {\n    getScope: \"getScope\",\n    getAncestors: \"getAncestors\",\n    getDeclaredVariables: \"getDeclaredVariables\",\n    markVariableAsUsed: \"markVariableAsUsed\",\n    getSource: \"getText\",\n    getSourceLines: \"getLines\",\n    getAllComments: \"getAllComments\",\n    getNodeByRangeIndex: \"getNodeByRangeIndex\",\n    getComments: \"getComments\",\n    getCommentsBefore: \"getCommentsBefore\",\n    getCommentsAfter: \"getCommentsAfter\",\n    getCommentsInside: \"getCommentsInside\",\n    getJSDocComment: \"getJSDocComment\",\n    getFirstToken: \"getFirstToken\",\n    getFirstTokens: \"getFirstTokens\",\n    getLastToken: \"getLastToken\",\n    getLastTokens: \"getLastTokens\",\n    getTokenAfter: \"getTokenAfter\",\n    getTokenBefore: \"getTokenBefore\",\n    getTokenByRangeStart: \"getTokenByRangeStart\",\n    getTokens: \"getTokens\",\n    getTokensAfter: \"getTokensAfter\",\n    getTokensBefore: \"getTokensBefore\",\n    getTokensBetween: \"getTokensBetween\",\n    parserServices: \"parserServices\"\n};\n\nconst METHODS_WITH_SIGNATURE_CHANGE = new Set([\n    \"getScope\",\n    \"getAncestors\",\n    \"markVariableAsUsed\",\n    \"getDeclaredVariables\"\n]);\n\n/**\n * Returns the parent ObjectMethod node\n * @param {Node} nodePath The nodePath of the current node\n * @returns {Node} The parent ObjectMethod node\n */\nfunction getParentObjectMethod(nodePath) {\n    if (!nodePath) {\n        return null;\n    }\n\n    const node = nodePath.node;\n\n    if (node.type && node.type === \"Property\" && node.method) {\n        return node;\n    }\n\n    return getParentObjectMethod(nodePath.parentPath);\n}\n\n//------------------------------------------------------------------------------\n// Transform Definition\n//------------------------------------------------------------------------------\n\n/**\n * Transforms an ESLint rule from the old format to the new format.\n * @param {Object} fileInfo holds information about the currently processed file.\n * * @param {Object} api holds the jscodeshift API\n * @returns {string} the new source code, after being transformed.\n */\n\nmodule.exports = function(fileInfo, api) {\n    const j = api.jscodeshift;\n    const root = j(fileInfo.source);\n    const USED_CONTEXT_METHODS = new Set();\n\n    /**\n     * Adds a variable declaration for the context method immediately inside the create() method\n     * @param {string} methodName The name of the context method\n     * @param {Array} args The arguments to be passed to the context method\n     * @returns {void}\n     */\n    function addContextMethodVariableDeclaration(methodName, args = []) {\n        if (USED_CONTEXT_METHODS.has(methodName)) {\n            return;\n        }\n\n        root.find(j.Property, {\n            key: { name: \"create\" }\n        }).replaceWith(({ node: createNode }) => {\n            const contextMethodDeclaration = j.variableDeclaration(\"const\", [\n                j.variableDeclarator(\n                    j.identifier(contextMethodsToPropertyMapping[methodName]),\n                    j.logicalExpression(\n                        \"??\",\n                        j.memberExpression(\n                            j.identifier(\"context\"),\n                            j.identifier(\n                                contextMethodsToPropertyMapping[methodName]\n                            )\n                        ),\n                        j.callExpression(\n                            j.memberExpression(\n                                j.identifier(\"context\"),\n                                j.identifier(methodName)\n                            ),\n                            [...args]\n                        )\n                    )\n                )\n            ]);\n\n            // Insert the sourceCodeDeclaration at the beginning of the create() method\n            createNode.value.body.body.unshift(contextMethodDeclaration);\n            USED_CONTEXT_METHODS.add(methodName);\n\n            return createNode;\n        });\n    }\n\n    // Update context methods\n    // context.getSourceCode() -> context.sourceCode ?? context.getSourceCode()\n    root.find(j.CallExpression, {\n        callee: {\n            object: {\n                type: \"Identifier\",\n                name: \"context\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: name =>\n                    Object.keys(contextMethodsToPropertyMapping).includes(name)\n            }\n        }\n    }).replaceWith(({ node }) => {\n        const method = node.callee.property.name;\n        const args = node.arguments;\n\n        addContextMethodVariableDeclaration(method, args);\n\n        // If the method is already declared as a variable in the create() method\n        // Replace all instances of context methods with corresponding variable\n        if (USED_CONTEXT_METHODS.has(method)) {\n            return j.identifier(contextMethodsToPropertyMapping[method]);\n        }\n\n        // Otherwise, create a variable declaration for the method\n        return j.logicalExpression(\n            \"??\",\n            j.memberExpression(\n                j.identifier(\"context\"),\n                j.identifier(contextMethodsToPropertyMapping[method])\n            ),\n            j.callExpression(\n                j.memberExpression(\n                    j.identifier(\"context\"),\n                    j.identifier(method)\n                ),\n                args\n            )\n        );\n    });\n\n    // Remove the variable declarations which have value same as the declaration\n    // const sourceCode = sourceCode -> Remove\n    root.find(j.VariableDeclaration, {\n        declarations: [\n            {\n                type: \"VariableDeclarator\",\n                id: {\n                    type: \"Identifier\",\n                    name: name =>\n                        Object.values(contextMethodsToPropertyMapping).includes(\n                            name\n                        )\n                },\n                init: {\n                    type: \"Identifier\"\n                }\n            }\n        ]\n    })\n        .filter(\n            ({ node }) =>\n                node.declarations[0].id.name === node.declarations[0].init.name\n        )\n        .remove();\n\n    // Move context methods to SourceCode\n    // context.getSource() -> sourceCode.getText()\n    root.find(j.CallExpression, {\n        callee: {\n            type: \"MemberExpression\",\n            object: {\n                type: \"Identifier\",\n                name: \"context\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: name =>\n                    Object.keys(contextToSourceCodeMapping).includes(name)\n            }\n        }\n    }).replaceWith(nodePath => {\n        const node = nodePath.node;\n        const method = node.callee.property.name;\n        const args = node.arguments;\n\n        if (method === \"getComments\") {\n            // eslint-disable-next-line no-console -- This is an intentional warning message\n            console.warn(\n                formatBoldYellow(\n                    `${path.relative(process.cwd(), fileInfo.path)}:${\n                        node.loc.start.line\n                    }:${\n                        node.loc.start.column\n                    } The \"getComments()\" method has been removed. Please use \"getCommentsBefore()\", \"getCommentsAfter()\", or \"getCommentsInside()\" instead. https://eslint.org/docs/latest/use/migrate-to-9.0.0#-removed-sourcecodegetcomments`\n                )\n            );\n            return node;\n        }\n\n        // Add variable declaration for the method if not already added\n        addContextMethodVariableDeclaration(\"getSourceCode\");\n\n        if (METHODS_WITH_SIGNATURE_CHANGE.has(method)) {\n            const parentObjectMethodNode = getParentObjectMethod(nodePath);\n            const parentObjectMethodParamName =\n                parentObjectMethodNode &&\n                parentObjectMethodNode.value.params[0].name;\n\n            // Return the node as is if the method is called with an argument\n            // context.getScope(node) -> sourceCode.getScope  ? sourceCode.getScope(node) : context.getScope();\n            return j.conditionalExpression(\n                j.memberExpression(\n                    j.identifier(\"sourceCode\"),\n                    j.identifier(contextToSourceCodeMapping[method])\n                ),\n                j.callExpression(\n                    j.memberExpression(\n                        j.identifier(\"sourceCode\"),\n                        j.identifier(contextToSourceCodeMapping[method])\n                    ),\n                    parentObjectMethodParamName\n                        ? [...args, j.identifier(parentObjectMethodParamName)]\n                        : args\n                ),\n                j.callExpression(\n                    j.memberExpression(\n                        j.identifier(\"context\"),\n                        j.identifier(method)\n                    ),\n                    []\n                )\n            );\n        }\n\n        node.callee.property.name = contextToSourceCodeMapping[method];\n        node.callee.object.name = \"sourceCode\";\n\n        return node;\n    });\n\n    // Migrate context.parserServices to sourceCode.parserServices\n    root.find(j.MemberExpression, {\n        object: {\n            type: \"Identifier\",\n            name: \"context\"\n        },\n        property: {\n            type: \"Identifier\",\n            name: \"parserServices\"\n        }\n    }).replaceWith(({ node }) => {\n        node.object.name = \"sourceCode\";\n        return node;\n    });\n\n    // Warn for codePath.currentSegments\n    root.find(j.Property, {\n        key: {\n            type: \"Identifier\",\n            name: name =>\n                name === \"onCodePathStart\" || name === \"onCodePathEnd\"\n        }\n    })\n        .find(j.MemberExpression, {\n            property: {\n                type: \"Identifier\",\n                name: \"currentSegments\"\n            }\n        })\n        .forEach(({ node }) => {\n            // eslint-disable-next-line no-console -- This is an intentional warning message\n            console.warn(\n                formatBoldYellow(\n                    `${path.relative(process.cwd(), fileInfo.path)}:${\n                        node.loc.start.line\n                    }:${\n                        node.loc.start.column\n                    } The \"CodePath#currentSegments\" property has been removed and it can't be migrated automatically.\\nPlease read https://eslint.org/blog/2023/09/preparing-custom-rules-eslint-v9/#codepath%23currentsegments for more information.\\n`\n                )\n            );\n        });\n\n    return root.toSource();\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,OAAO,sBAAsBA,OAAO,sBAAsB;AAC9D;AAEA,MAAMC,+BAA+B,GAAG;EACpCC,aAAa,EAAE,YAAY;EAC3BC,WAAW,EAAE,UAAU;EACvBC,mBAAmB,EAAE,kBAAkB;EACvCC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,0BAA0B,GAAG;EAC/BC,QAAQ,EAAE,UAAU;EACpBC,YAAY,EAAE,cAAc;EAC5BC,oBAAoB,EAAE,sBAAsB;EAC5CC,kBAAkB,EAAE,oBAAoB;EACxCC,SAAS,EAAE,SAAS;EACpBC,cAAc,EAAE,UAAU;EAC1BC,cAAc,EAAE,gBAAgB;EAChCC,mBAAmB,EAAE,qBAAqB;EAC1CC,WAAW,EAAE,aAAa;EAC1BC,iBAAiB,EAAE,mBAAmB;EACtCC,gBAAgB,EAAE,kBAAkB;EACpCC,iBAAiB,EAAE,mBAAmB;EACtCC,eAAe,EAAE,iBAAiB;EAClCC,aAAa,EAAE,eAAe;EAC9BC,cAAc,EAAE,gBAAgB;EAChCC,YAAY,EAAE,cAAc;EAC5BC,aAAa,EAAE,eAAe;EAC9BC,aAAa,EAAE,eAAe;EAC9BC,cAAc,EAAE,gBAAgB;EAChCC,oBAAoB,EAAE,sBAAsB;EAC5CC,SAAS,EAAE,WAAW;EACtBC,cAAc,EAAE,gBAAgB;EAChCC,eAAe,EAAE,iBAAiB;EAClCC,gBAAgB,EAAE,kBAAkB;EACpCC,cAAc,EAAE;AACpB,CAAC;AAED,MAAMC,6BAA6B,GAAG,IAAIC,GAAG,CAAC,CAC1C,UAAU,EACV,cAAc,EACd,oBAAoB,EACpB,sBAAsB,CACzB,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,QAAQ,EAAE;EACrC,IAAI,CAACA,QAAQ,EAAE;IACX,OAAO,IAAI;EACf;EAEA,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;EAE1B,IAAIA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,KAAK,UAAU,IAAID,IAAI,CAACE,MAAM,EAAE;IACtD,OAAOF,IAAI;EACf;EAEA,OAAOF,qBAAqB,CAACC,QAAQ,CAACI,UAAU,CAAC;AACrD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAEC,GAAG,EAAE;EACrC,MAAMC,CAAC,GAAGD,GAAG,CAACE,WAAW;EACzB,MAAMC,IAAI,GAAGF,CAAC,CAACF,QAAQ,CAACK,MAAM,CAAC;EAC/B,MAAMC,oBAAoB,GAAG,IAAIf,GAAG,CAAC,CAAC;;EAEtC;AACJ;AACA;AACA;AACA;AACA;EACI,SAASgB,mCAAmCA,CAACC,UAAU,EAAEC,IAAI,GAAG,EAAE,EAAE;IAChE,IAAIH,oBAAoB,CAACI,GAAG,CAACF,UAAU,CAAC,EAAE;MACtC;IACJ;IAEAJ,IAAI,CAACO,IAAI,CAACT,CAAC,CAACU,QAAQ,EAAE;MAClBC,GAAG,EAAE;QAAEC,IAAI,EAAE;MAAS;IAC1B,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAAErB,IAAI,EAAEsB;IAAW,CAAC,KAAK;MACrC,MAAMC,wBAAwB,GAAGf,CAAC,CAACgB,mBAAmB,CAAC,OAAO,EAAE,CAC5DhB,CAAC,CAACiB,kBAAkB,CAChBjB,CAAC,CAACkB,UAAU,CAAC7D,+BAA+B,CAACiD,UAAU,CAAC,CAAC,EACzDN,CAAC,CAACmB,iBAAiB,CACf,IAAI,EACJnB,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,SAAS,CAAC,EACvBlB,CAAC,CAACkB,UAAU,CACR7D,+BAA+B,CAACiD,UAAU,CAC9C,CACJ,CAAC,EACDN,CAAC,CAACqB,cAAc,CACZrB,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,SAAS,CAAC,EACvBlB,CAAC,CAACkB,UAAU,CAACZ,UAAU,CAC3B,CAAC,EACD,CAAC,GAAGC,IAAI,CACZ,CACJ,CACJ,CAAC,CACJ,CAAC;;MAEF;MACAO,UAAU,CAACQ,KAAK,CAACC,IAAI,CAACA,IAAI,CAACC,OAAO,CAACT,wBAAwB,CAAC;MAC5DX,oBAAoB,CAACqB,GAAG,CAACnB,UAAU,CAAC;MAEpC,OAAOQ,UAAU;IACrB,CAAC,CAAC;EACN;;EAEA;EACA;EACAZ,IAAI,CAACO,IAAI,CAACT,CAAC,CAAC0B,cAAc,EAAE;IACxBC,MAAM,EAAE;MACJC,MAAM,EAAE;QACJnC,IAAI,EAAE,YAAY;QAClBmB,IAAI,EAAE;MACV,CAAC;MACDiB,QAAQ,EAAE;QACNpC,IAAI,EAAE,YAAY;QAClBmB,IAAI,EAAEA,IAAI,IACNkB,MAAM,CAACC,IAAI,CAAC1E,+BAA+B,CAAC,CAAC2E,QAAQ,CAACpB,IAAI;MAClE;IACJ;EACJ,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAAErB;EAAK,CAAC,KAAK;IACzB,MAAME,MAAM,GAAGF,IAAI,CAACmC,MAAM,CAACE,QAAQ,CAACjB,IAAI;IACxC,MAAML,IAAI,GAAGf,IAAI,CAACyC,SAAS;IAE3B5B,mCAAmC,CAACX,MAAM,EAAEa,IAAI,CAAC;;IAEjD;IACA;IACA,IAAIH,oBAAoB,CAACI,GAAG,CAACd,MAAM,CAAC,EAAE;MAClC,OAAOM,CAAC,CAACkB,UAAU,CAAC7D,+BAA+B,CAACqC,MAAM,CAAC,CAAC;IAChE;;IAEA;IACA,OAAOM,CAAC,CAACmB,iBAAiB,CACtB,IAAI,EACJnB,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,SAAS,CAAC,EACvBlB,CAAC,CAACkB,UAAU,CAAC7D,+BAA+B,CAACqC,MAAM,CAAC,CACxD,CAAC,EACDM,CAAC,CAACqB,cAAc,CACZrB,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,SAAS,CAAC,EACvBlB,CAAC,CAACkB,UAAU,CAACxB,MAAM,CACvB,CAAC,EACDa,IACJ,CACJ,CAAC;EACL,CAAC,CAAC;;EAEF;EACA;EACAL,IAAI,CAACO,IAAI,CAACT,CAAC,CAACkC,mBAAmB,EAAE;IAC7BC,YAAY,EAAE,CACV;MACI1C,IAAI,EAAE,oBAAoB;MAC1B2C,EAAE,EAAE;QACA3C,IAAI,EAAE,YAAY;QAClBmB,IAAI,EAAEA,IAAI,IACNkB,MAAM,CAACO,MAAM,CAAChF,+BAA+B,CAAC,CAAC2E,QAAQ,CACnDpB,IACJ;MACR,CAAC;MACD0B,IAAI,EAAE;QACF7C,IAAI,EAAE;MACV;IACJ,CAAC;EAET,CAAC,CAAC,CACG8C,MAAM,CACH,CAAC;IAAE/C;EAAK,CAAC,KACLA,IAAI,CAAC2C,YAAY,CAAC,CAAC,CAAC,CAACC,EAAE,CAACxB,IAAI,KAAKpB,IAAI,CAAC2C,YAAY,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC1B,IACnE,CAAC,CACA4B,MAAM,CAAC,CAAC;;EAEb;EACA;EACAtC,IAAI,CAACO,IAAI,CAACT,CAAC,CAAC0B,cAAc,EAAE;IACxBC,MAAM,EAAE;MACJlC,IAAI,EAAE,kBAAkB;MACxBmC,MAAM,EAAE;QACJnC,IAAI,EAAE,YAAY;QAClBmB,IAAI,EAAE;MACV,CAAC;MACDiB,QAAQ,EAAE;QACNpC,IAAI,EAAE,YAAY;QAClBmB,IAAI,EAAEA,IAAI,IACNkB,MAAM,CAACC,IAAI,CAACrE,0BAA0B,CAAC,CAACsE,QAAQ,CAACpB,IAAI;MAC7D;IACJ;EACJ,CAAC,CAAC,CAACC,WAAW,CAACtB,QAAQ,IAAI;IACvB,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;IAC1B,MAAME,MAAM,GAAGF,IAAI,CAACmC,MAAM,CAACE,QAAQ,CAACjB,IAAI;IACxC,MAAML,IAAI,GAAGf,IAAI,CAACyC,SAAS;IAE3B,IAAIvC,MAAM,KAAK,aAAa,EAAE;MAC1B;MACA+C,OAAO,CAACC,IAAI,CACRvF,gBAAgB,CACZ,GAAGF,IAAI,CAAC0F,QAAQ,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE/C,QAAQ,CAAC7C,IAAI,CAAC,IAC1CuC,IAAI,CAACsD,GAAG,CAACC,KAAK,CAACC,IAAI,IAEnBxD,IAAI,CAACsD,GAAG,CAACC,KAAK,CAACE,MAAM,4NAE7B,CACJ,CAAC;MACD,OAAOzD,IAAI;IACf;;IAEA;IACAa,mCAAmC,CAAC,eAAe,CAAC;IAEpD,IAAIjB,6BAA6B,CAACoB,GAAG,CAACd,MAAM,CAAC,EAAE;MAC3C,MAAMwD,sBAAsB,GAAG5D,qBAAqB,CAACC,QAAQ,CAAC;MAC9D,MAAM4D,2BAA2B,GAC7BD,sBAAsB,IACtBA,sBAAsB,CAAC5B,KAAK,CAAC8B,MAAM,CAAC,CAAC,CAAC,CAACxC,IAAI;;MAE/C;MACA;MACA,OAAOZ,CAAC,CAACqD,qBAAqB,CAC1BrD,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,YAAY,CAAC,EAC1BlB,CAAC,CAACkB,UAAU,CAACxD,0BAA0B,CAACgC,MAAM,CAAC,CACnD,CAAC,EACDM,CAAC,CAACqB,cAAc,CACZrB,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,YAAY,CAAC,EAC1BlB,CAAC,CAACkB,UAAU,CAACxD,0BAA0B,CAACgC,MAAM,CAAC,CACnD,CAAC,EACDyD,2BAA2B,GACrB,CAAC,GAAG5C,IAAI,EAAEP,CAAC,CAACkB,UAAU,CAACiC,2BAA2B,CAAC,CAAC,GACpD5C,IACV,CAAC,EACDP,CAAC,CAACqB,cAAc,CACZrB,CAAC,CAACoB,gBAAgB,CACdpB,CAAC,CAACkB,UAAU,CAAC,SAAS,CAAC,EACvBlB,CAAC,CAACkB,UAAU,CAACxB,MAAM,CACvB,CAAC,EACD,EACJ,CACJ,CAAC;IACL;IAEAF,IAAI,CAACmC,MAAM,CAACE,QAAQ,CAACjB,IAAI,GAAGlD,0BAA0B,CAACgC,MAAM,CAAC;IAC9DF,IAAI,CAACmC,MAAM,CAACC,MAAM,CAAChB,IAAI,GAAG,YAAY;IAEtC,OAAOpB,IAAI;EACf,CAAC,CAAC;;EAEF;EACAU,IAAI,CAACO,IAAI,CAACT,CAAC,CAACsD,gBAAgB,EAAE;IAC1B1B,MAAM,EAAE;MACJnC,IAAI,EAAE,YAAY;MAClBmB,IAAI,EAAE;IACV,CAAC;IACDiB,QAAQ,EAAE;MACNpC,IAAI,EAAE,YAAY;MAClBmB,IAAI,EAAE;IACV;EACJ,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAAErB;EAAK,CAAC,KAAK;IACzBA,IAAI,CAACoC,MAAM,CAAChB,IAAI,GAAG,YAAY;IAC/B,OAAOpB,IAAI;EACf,CAAC,CAAC;;EAEF;EACAU,IAAI,CAACO,IAAI,CAACT,CAAC,CAACU,QAAQ,EAAE;IAClBC,GAAG,EAAE;MACDlB,IAAI,EAAE,YAAY;MAClBmB,IAAI,EAAEA,IAAI,IACNA,IAAI,KAAK,iBAAiB,IAAIA,IAAI,KAAK;IAC/C;EACJ,CAAC,CAAC,CACGH,IAAI,CAACT,CAAC,CAACsD,gBAAgB,EAAE;IACtBzB,QAAQ,EAAE;MACNpC,IAAI,EAAE,YAAY;MAClBmB,IAAI,EAAE;IACV;EACJ,CAAC,CAAC,CACD2C,OAAO,CAAC,CAAC;IAAE/D;EAAK,CAAC,KAAK;IACnB;IACAiD,OAAO,CAACC,IAAI,CACRvF,gBAAgB,CACZ,GAAGF,IAAI,CAAC0F,QAAQ,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE/C,QAAQ,CAAC7C,IAAI,CAAC,IAC1CuC,IAAI,CAACsD,GAAG,CAACC,KAAK,CAACC,IAAI,IAEnBxD,IAAI,CAACsD,GAAG,CAACC,KAAK,CAACE,MAAM,qOAE7B,CACJ,CAAC;EACL,CAAC,CAAC;EAEN,OAAO/C,IAAI,CAACsD,QAAQ,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]}},"mtime":1735836712043}}